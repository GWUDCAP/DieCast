services:

  dev:
    build:
      context: .
      dockerfile: docker/Dockerfiles/Dockerfile.dev
    container_name: dev
    env_file:
      - .env
    volumes:
      - .:/app
    networks:
      - app-network
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - ENV_FILE=.env
      - REDIS_HOST=redis
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "8888:8888"  # For Jupyter if needed
    restart: "no"  # Don't auto-restart for development

  web:
    build:
      context: .
      dockerfile: docker/Dockerfiles/Dockerfile.web
    container_name: web
    volumes:
      - ./web:/app/web
      - ./web/static:/app/web/static
      - ./utils:/app/utils
      - ./data:/app/data
      - ./logger:/app/logger
      - ./requirements/web.requirements:/app/web.requirements
    networks:
      - app-network
    environment:
      - ENV_FILE=.env
      - CONTAINER_NAME=web
    expose:
      - "5000"
    restart: always
  
  api:
    build:
      context: .
      dockerfile: docker/Dockerfiles/Dockerfile.api
    container_name: api
    env_file:
      - .env
    volumes:
      - ./api:/app/api
      - ./utils:/app/utils
      - ./data:/app/data
      - ./logger:/app/logger
      - ./requirements/api.requirements:/app/api.requirements
    networks:
      - app-network
    environment:
      - ENV_FILE=.env
      - CONTAINER_NAME=api
    restart: always

  airrows:
    build:
      context: .
      dockerfile: docker/Dockerfiles/Dockerfile.airrows
    container_name: airrows
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - app-network
    volumes:
      - ./.ipython:/app/.ipython
      - ./bytebot:/app/bytebot
      - ./test_projects/airrows:/app/airrows
      - ./utils:/app/utils
      - ./data:/app/data
      - ./logger:/app/logger
      - ./requirements/airrows.requirements:/app/airrows.requirements
    environment:
      - ENV_FILE=.env
      - CONTAINER_NAME=airrows
      - REDIS_HOST=redis
      - PYTHONPATH=/app
      - IPYTHONDIR=/app/.ipython
    tty: true
    stdin_open: true
    command: sleep infinity  # Keeps container running without starting your app
    expose:
      - "5000"
    restart: always

  bb_v3:
    build:
      context: .
      dockerfile: docker/Dockerfiles/Dockerfile.bb_v3
    container_name: bb_v3
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - app-network
    volumes:
      - ./bytebot:/app/bytebot
      - ./test_projects/bb_v3:/app/bb_v3
      - ./utils:/app/utils
      - ./data:/app/data
      - ./logger:/app/logger
      - ./requirements/bb_v3.requirements:/app/bb_v3.requirements
    environment:
      - ENV_FILE=.env
      - CONTAINER_NAME=bb_v3
      - REDIS_HOST=redis
    expose:
      - "5000"
    restart: always

  nginx:
    image: nginx:stable
    env_file:
      - .env
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d/:/etc/nginx/conf.d/:ro
      - ./docker/nginx/generate_htpasswd.sh:/docker-entrypoint.d/generate_htpasswd.sh:ro
      - ./web/static:/app/web/static:ro
      - certs:/etc/letsencrypt
      - certs-data:/var/lib/letsencrypt
      - ./data:/app/data
      - ./docker/certbot/www:/var/www/certbot
    networks:
      - app-network
    environment:
      - ADMIN_USER=${ADMIN_USER}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
    ports:
      - "80:80"
      - "443:443"
    restart: always
    depends_on:
      - redis-insight  # Simplified dependency without health check

  certbot:
    image: certbot/certbot
    volumes:
      - certs:/etc/letsencrypt
      - certs-data:/var/lib/letsencrypt
      - ./docker/certbot/run_certbot.sh:/run_certbot.sh
      - ./docker/certbot/www:/var/www/certbot
    entrypoint: ["sh", "/run_certbot.sh"]
    networks:
      - app-network

  redis:
    image: "redis/redis-stack-server:latest"
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./backups:/backups
    networks:
      - app-network
    env_file:
      - .env
    command: [
      "redis-server",
      "--loadmodule", "/opt/redis-stack/lib/redisearch.so",
      "--loadmodule", "/opt/redis-stack/lib/rejson.so",
      "--protected-mode", "no",
      "--requirepass", "${REDIS_PASSWORD}",
      "--maxmemory", "2gb",
      "--maxmemory-policy", "allkeys-lru",
      "--maxmemory-samples", "10",
      "--save", "900", "1",
      "--save", "300", "10",
      "--save", "60", "10000",
      "--dir", "/data",
      "--dbfilename", "dump.rdb"
    ]
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always

  redis-insight:
    image: "redislabs/redisinsight:latest"
    container_name: redis-insight
    ports:
      - "8001:5540"            # Map host port 8001 to container's port 5540 (where it's actually listening)
    environment:
      - RI_WEB_BIND=0.0.0.0
      - REDISINSIGHT_BIND_IP=0.0
      - RI_WEB_PORT=8001
    env_file:
      - .env
    volumes:
      - redis-insight:/db
    networks:
      - app-network
    restart: always

  # bb_comms:
  #   build:
  #     context: .
  #     dockerfile: docker/Dockerfiles/Dockerfile.bb_comms
  #   container_name: bb_comms
  #   env_file:
  #     - .env
  #   depends_on:
  #     redis:
  #       condition: service_healthy
  #   networks:
  #     - app-network
  #   volumes:
  #     - ./agents:/app/agents
  #     - ./utils:/app/utils
  #     - ./data:/app/data
  #     - ./logger:/app/logger
  #     - ./requirements/agents.requirements:/app/agents.requirements
  #   environment:
  #     - ENV_FILE=.env
  #     - CONTAINER_NAME=bb_comms
  #     - REDIS_HOST=redis
  #   restart: always

  # shu_voice:
  #   build:
  #     context: .
  #     dockerfile: docker/Dockerfiles/Dockerfile.shu_voice
  #   container_name: shu_voice
  #   env_file:
  #     - .env
  #   depends_on:
  #     redis:
  #       condition: service_healthy
  #   networks:
  #     - app-network
  #   volumes:
  #     - ./agents:/app/agents
  #     - ./utils:/app/utils
  #     - ./data:/app/data
  #     - ./logger:/app/logger
  #     - ./requirements/agents.requirements:/app/agents.requirements
  #   environment:
  #     - ENV_FILE=.env
  #     - CONTAINER_NAME=shu_voice
  #     - REDIS_HOST=redis
  #   restart: always

networks:
  app-network:
    driver: bridge

volumes:
  certs:
  certs-data:
  redis_data:
  redis-insight:
